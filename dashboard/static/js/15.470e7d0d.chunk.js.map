{"version":3,"sources":["components/SellerProperty/Property/Loadable.js","components/SellerProperty/Listing/Form/index.js"],"names":["LoadableComponent","Loadable","loader","loading","Loader","ListPropertyForm","props","properties","isLoading","fetchSellerPropertyForms","error","useEffect","toastr","_isEmpty","className","orderedProperties","sort","itemA","itemB","moment","CreatedAt","map","property","index","forms","Forms","propertyId","PropertyId","propertyIndex","key","structuredSelector","createStructuredSelector","state","_get","mapDispatchToProps","connect"],"mappings":"qNAOeA,EAJWC,IAAS,CACjCC,OAAQ,kBAAM,iCACdC,QAASC,M,4DCJX,iDAoBO,IAAMC,EAAmB,SAC9BC,GACoD,IAC5CC,EAA2DD,EAA3DC,WAAYC,EAA+CF,EAA/CE,UAAWC,EAAoCH,EAApCG,yBAA0BC,EAAUJ,EAAVI,MAazD,GAXAC,qBAAU,WACRF,MAEC,IAEHE,qBAAU,WACJD,GACFE,SAAOF,MAAM,0BAEd,CAACA,IAEAF,EACF,OAAO,kBAACJ,EAAA,EAAD,MAOT,GAAIS,IAASN,KAAgBC,EAC3B,OAAO,uBAAGM,UAAU,uBAAb,sBAGT,IAAMC,EAAoBR,EAAWS,MAAK,SAACC,EAAOC,GAChD,OAAOC,IAAOF,EAAMG,WAAaD,IAAOD,EAAME,cAGhD,OACE,oCACE,yBAAKN,UAAU,mCAAf,2HAICC,EAAkBM,KAAI,SAACC,EAAUC,GAAW,IAC5BC,EAAkCF,EAAzCG,MAA0BC,EAAeJ,EAA3BK,WAEtB,OACE,kBAAC,EAAD,CACEC,cAAeL,EACfD,SAAUA,EACVE,MAAOA,EACPK,IAAKH,SAQXI,EAAqBC,YAAyB,CAClDxB,WAAY,SAAAyB,GAAK,OACfC,IAAKD,EAAO,CAAC,sBAAuB,gBAAiB,cAAe,KACtExB,UAAW,SAAAwB,GAAK,OAAIC,IAAKD,EAAO,CAAC,sBAAuB,eACxDtB,MAAO,SAAAsB,GAAK,OAAIC,IAAKD,EAAO,CAAC,sBAAuB,aAGhDE,EAAqB,CAAEzB,8BAEb0B,4BACdL,EACAI,EAFcC,CAGd9B","file":"static/js/15.470e7d0d.chunk.js","sourcesContent":["import Loadable from 'react-loadable';\nimport Loader from 'components/Loader';\n\nconst LoadableComponent = Loadable({\n  loader: () => import('./index'),\n  loading: Loader,\n});\nexport default LoadableComponent;\n","// @flow\nimport React, { useEffect, Fragment } from 'react';\nimport type { Element, AbstractComponent } from 'react';\nimport { fetchSellerPropertyForms } from './redux/Actions';\nimport { toastr } from 'react-redux-toastr';\nimport { createStructuredSelector } from 'reselect';\nimport { connect } from 'react-redux';\nimport PropertyComponent from 'components/SellerProperty/Property/Loadable';\nimport Loader from 'components/Loader';\nimport _get from 'lodash/get';\nimport _isEmpty from 'lodash/isEmpty';\nimport moment from 'moment';\nimport './Style.css';\n\ntype Props = {\n  properties: Array<Object>,\n  fetchSellerPropertyForms: Function,\n  error: string,\n  isLoading: boolean,\n};\n\nexport const ListPropertyForm = (\n  props: Props,\n): Element<typeof Fragment | 'p' | typeof Loader> => {\n  const { properties, isLoading, fetchSellerPropertyForms, error } = props;\n\n  useEffect(() => {\n    fetchSellerPropertyForms();\n    // eslint-disable-next-line react-hooks/exhaustive-deps,\n  }, []);\n\n  useEffect(() => {\n    if (error) {\n      toastr.error('Something went wrong');\n    }\n  }, [error]);\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  if (process.env.REACT_APP_SELL_SIDE_ENABLED !== '1') {\n    return <p className=\"incorrect_parameter\">Coming Soon</p>;\n  }\n\n  if (_isEmpty(properties) && !isLoading) {\n    return <p className=\"incorrect_parameter\">Property Not Found</p>;\n  }\n\n  const orderedProperties = properties.sort((itemA, itemB) => {\n    return moment(itemA.CreatedAt) - moment(itemB.CreatedAt);\n  });\n\n  return (\n    <>\n      <div className=\"b_texts offer_block_description\">\n        The following modules can be filled out in any order; simply click one\n        to begin. You can save your progress at any time\n      </div>\n      {orderedProperties.map((property, index) => {\n        const { Forms: forms, PropertyId: propertyId } = property;\n\n        return (\n          <PropertyComponent\n            propertyIndex={index}\n            property={property}\n            forms={forms}\n            key={propertyId}\n          />\n        );\n      })}\n    </>\n  );\n};\n\nconst structuredSelector = createStructuredSelector({\n  properties: state =>\n    _get(state, ['sellerPropertyForms', 'propertyForms', 'Properties'], []),\n  isLoading: state => _get(state, ['sellerPropertyForms', 'isLoading']),\n  error: state => _get(state, ['sellerPropertyForms', 'error']),\n});\n\nconst mapDispatchToProps = { fetchSellerPropertyForms };\n\nexport default (connect(\n  structuredSelector,\n  mapDispatchToProps,\n)(ListPropertyForm): AbstractComponent<Props>);\n"],"sourceRoot":""}