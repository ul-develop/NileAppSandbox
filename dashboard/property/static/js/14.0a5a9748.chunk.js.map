{"version":3,"sources":["configs/locate.js","components/Table/index.js","helpers/Table.js","helpers/Datetime.js","helpers/Offer.js","components/SellerOfferList/ActionButtons.js","components/SellerOfferList/index.js","containers/SellerOffer/OfferList/index.js"],"names":["LOCATE","CURRENCY","hideIfInvalidProps","columns","data","isArray","length","props","dataMemo","useMemo","useTable","getTableProps","getTableBodyProps","headers","rows","prepareRow","className","map","header","getHeaderProps","key","restHeaderProps","render","row","getRowProps","restRowProps","cells","cell","getCellProps","restCellProps","renderPrice","prop","value","_get","Intl","NumberFormat","style","currency","format","renderItem","formatDate","date","DateTimeFormat","Date","getCounterData","offer","pathData","reduce","result","name","concat","mappingCounterData","OFFER_STEPS","counteredBySeller","MappingCounter","isOfferContingencies","Number","confirmTransfer","canRemoveContingency","isDisabledContingencyAction","CONTINGENCY_STATUS","done","getContingencyStatus","dueDateFormarted","status","dueDate","toDateString","inProcess","overdue","mappingOfferContingencies","title","acc","contingency","contingencyValue","ActionButtons","isSubmitting","handleClickOpenCounterDialog","useState","anchorEl","setAnchorEl","stepId","isInvalidSubmission","STEPS_AWAITING_SELLER_ACTION","includes","type","onClick","event","currentTarget","disabled","Menu","keepMounted","open","Boolean","onClose","MenuItem","component","offers","memo","isLoading","mappingOffers","Header","accessor","Cell","Loader","Table","structuredSelector","createStructuredSelector","state","isUpdatedStep","error","isFormLoaded","mapDispatchToProps","fetchOffers","saveOfferStep","getBuyerOffers","connect","withErrorBoundary","openCounterOfferDialog","setOpenCounterOfferDialog","selectedOffer","setSelectedOffer","useEffect","handleClickCloseDialog","message","toastr","OFFER_ERROR_MESSAGES","saveFailure","isReload","CounterOfferModal","handleApproval","offerId","new_step","paBeingCreated","handleDecline","sellerDecline"],"mappings":"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","file":"static/js/14.0a5a9748.chunk.js","sourcesContent":["export const LOCATE = 'en-US';\nexport const CURRENCY = 'USD';\n","// @flow\nimport React, { useMemo } from 'react';\nimport type { Element, AbstractComponent } from 'react';\nimport { useTable } from 'react-table';\nimport { hideIfInvalidProps } from 'utils/RenderComponent';\nimport isArray from 'lodash/isArray';\nimport './Style.css';\n\ntype Props = {\n  columns: Array<Object>,\n  data: Array<Object>,\n};\n\nconst checkProps = ({ columns, data }) =>\n  isArray(columns) && columns.length && isArray(data) && data.length;\n\nconst Table = (props: Props): Element<'table'> => {\n  const { columns, data } = props;\n\n  const dataMemo = useMemo(() => data, [data]);\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headers,\n    rows,\n    prepareRow,\n  } = useTable({\n    columns,\n    data: dataMemo,\n  });\n\n  return (\n    <table {...getTableProps()} className=\"nile-table\">\n      <thead>\n        <tr>\n          {headers.map(header => {\n            const { key, ...restHeaderProps } = header.getHeaderProps();\n\n            return (\n              <th key={key} {...restHeaderProps}>\n                {header.render('Header')}\n              </th>\n            );\n          })}\n        </tr>\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map(row => {\n          prepareRow(row);\n          const { key, ...restRowProps } = row.getRowProps();\n\n          return (\n            <tr key={key} {...restRowProps}>\n              {row.cells.map(cell => {\n                const { key, ...restCellProps } = cell.getCellProps();\n\n                return (\n                  <td key={key} {...restCellProps}>\n                    {cell.render('Cell')}\n                  </td>\n                );\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nexport default (hideIfInvalidProps(checkProps)(Table): AbstractComponent<{}>);\n","import React from 'react';\nimport _get from 'lodash/get';\nimport { LOCATE, CURRENCY } from 'configs/locate';\n\nexport const renderPrice = prop => {\n  const value = _get(prop, 'value', '');\n  return `${\n    value\n      ? new Intl.NumberFormat(LOCATE, {\n          style: 'currency',\n          currency: CURRENCY,\n        }).format(value)\n      : '-'\n  }`;\n};\n\nexport const renderItem = ({ value }) => <span>{value || '-'}</span>;\n","// @flow\nimport { LOCATE } from 'configs/locate';\n\nexport const formatDate = (date: string): string => {\n  return new Intl.DateTimeFormat(LOCATE).format(new Date(date));\n};\n","// @flow\nimport _get from 'lodash/get';\nimport { OFFER_STEPS, CONTINGENCY_STATUS } from 'shared/Consts';\nimport type { Offer, OfferTable } from 'types/Offer';\nimport { formatDate } from './Datetime';\n\nconst getCounterData = (offer: Offer, pathData: Array<string>): OfferTable => {\n  const fieldNames = [\n    'OfferPrice',\n    'InspectionContingency',\n    'SaleOfHomeContingency',\n    'ClosingPeriod',\n    'Furniture',\n  ];\n\n  return fieldNames.reduce((result: OfferTable, name: string) => {\n    return {\n      ...result,\n      [name]: _get(offer, pathData.concat(name)),\n    };\n  }, {});\n};\n\nexport const mappingCounterData = (offer: Offer): Object => {\n  const stepId = _get(offer, ['StepId']);\n\n  if (stepId === OFFER_STEPS.counteredBySeller) {\n    return {\n      ...offer,\n      MappingCounter: getCounterData(offer, ['CounterOffer', 'SellerCounter']),\n    };\n  }\n\n  return {\n    ...offer,\n    MappingCounter: getCounterData(offer, ['CounterOffer', 'BuyerCounter']),\n  };\n};\n\nexport const isOfferContingencies = (offer: Offer): boolean => {\n  const stepId = Number(_get(offer, ['StepId']));\n\n  return stepId >= OFFER_STEPS.confirmTransfer;\n};\n\nexport const canRemoveContingency = (offer: Offer): boolean => {\n  return _get(offer, ['Step', 'buyer_can_remove_contingencies']);\n};\n\nexport const isDisabledContingencyAction = (row: any): boolean => {\n  return _get(row, ['values', 'status']) === CONTINGENCY_STATUS.done;\n};\n\nconst getContingencyStatus = (offer: Offer, name: string) => {\n  const dueDate = _get(offer, ['Contingencies', `${name}DueDate`]);\n  let dueDateFormarted;\n  let status;\n\n  if (dueDate) {\n    dueDateFormarted = formatDate(dueDate);\n    status =\n      formatDate(new Date().toDateString()) <= dueDateFormarted\n        ? CONTINGENCY_STATUS.inProcess\n        : CONTINGENCY_STATUS.overdue;\n  }\n\n  const isRemoved = _get(offer, ['Contingencies', `${name}Removed`]);\n  if (isRemoved === 'Yes') {\n    status = CONTINGENCY_STATUS.done;\n  }\n\n  return {\n    status,\n    dueDate: dueDateFormarted,\n  };\n};\n\nexport const mappingOfferContingencies = (offer: Offer): Array<Object> => {\n  const contingencyNames = [\n    {\n      name: 'FinanceContingency',\n      title: 'Finance Contingency Removal',\n    },\n    {\n      name: 'InspectionContingency',\n      title: 'Inspection Contingency Removal',\n    },\n    {\n      name: 'SaleOfHomeContingency',\n      title: 'Homesale Contingency Removal',\n    },\n  ];\n\n  return contingencyNames.reduce((acc: Array<Object>, contingency: Object) => {\n    const { name, title } = contingency;\n\n    const contingencyValue = _get(offer, ['Contingencies', name]);\n\n    if (contingencyValue !== 'Yes') {\n      return [...acc, { title }];\n    }\n\n    return [\n      ...acc,\n      {\n        title,\n        offer,\n        ...getContingencyStatus(offer, name),\n      },\n    ];\n  }, []);\n};\n","// @flow\nimport React, { useState, Fragment } from 'react';\nimport type { Element } from 'react';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport _get from 'lodash/get';\nimport { STEPS_AWAITING_SELLER_ACTION } from 'shared/Consts';\nimport type { Offer } from 'types/Offer';\n\ntype Props = {\n  offer: Offer,\n  isSubmitting: boolean,\n  handleClickOpenCounterDialog: Function,\n};\n\nexport const ActionButtons = ({\n  offer,\n  isSubmitting,\n  handleClickOpenCounterDialog,\n}: Props): Element<typeof Fragment> => {\n  const [anchorEl, setAnchorEl] = useState(null);\n  const stepId = _get(offer, ['StepId']);\n\n  const handleClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const isInvalidSubmission =\n    isSubmitting || !STEPS_AWAITING_SELLER_ACTION.includes(stepId);\n\n  const onClickOpenCounterDialog = () => {\n    if (isInvalidSubmission) return;\n\n    handleClickOpenCounterDialog(offer);\n  };\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        className=\"minimal-btn animated_fastest\"\n        onClick={handleClick}\n        disabled={isInvalidSubmission}\n      >\n        <i className=\"fa fa-ellipsis-h\"></i>\n      </button>\n      <Menu\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        <MenuItem component=\"button\" onClick={onClickOpenCounterDialog}>\n          Counter Offer\n        </MenuItem>\n      </Menu>\n    </>\n  );\n};\n","// @flow\nimport React, { memo } from 'react';\nimport type { Element, AbstractComponent } from 'react';\nimport Table from 'components/Table';\nimport Loader from 'components/Loader';\nimport { ActionButtons } from './ActionButtons';\nimport { hideIfInvalidProps } from 'utils/RenderComponent';\nimport { mappingCounterData } from 'helpers/Offer';\nimport _get from 'lodash/get';\nimport { renderPrice } from 'helpers/Table';\n\ntype Props = {\n  offers: Array<Object>,\n  isLoading: boolean,\n  isSubmitting: boolean,\n  handleClickOpenCounterDialog: Function,\n};\n\nconst checkProps = ({ offers }) => offers && offers.length;\n\nconst SellerOfferList = (props: Props): Element<'div'> => {\n  const {\n    offers,\n    isLoading,\n    isSubmitting,\n    handleClickOpenCounterDialog,\n  } = props;\n\n  const mappingOffers = offers.map(mappingCounterData);\n\n  const renderItem = ({ value }) => <span>{value || '-'}</span>;\n\n  const renderActions = ({ row }) => (\n    <ActionButtons\n      offer={_get(row, ['original'])}\n      isSubmitting={isSubmitting}\n      handleClickOpenCounterDialog={handleClickOpenCounterDialog}\n    />\n  );\n\n  const columns = [\n    {\n      Header: 'ID',\n      accessor: 'OfferNo',\n      Cell: renderItem,\n    },\n    {\n      Header: 'Offer Price',\n      accessor: 'MappingCounter.OfferPrice',\n      Cell: renderPrice,\n    },\n    {\n      Header: 'Funding',\n      accessor: 'Funding.PurchaseType',\n      Cell: renderItem,\n    },\n    {\n      Header: 'Loan Type',\n      accessor: 'Funding.LoanType',\n      Cell: renderItem,\n    },\n    {\n      Header: 'Down Payment',\n      accessor: 'Funding.DownPayment',\n      Cell: renderPrice,\n    },\n    {\n      Header: 'Due Diligence Contingency',\n      accessor: 'MappingCounter.InspectionContingency',\n      Cell: renderItem,\n    },\n    {\n      Header: 'Sale of Home Contingency',\n      accessor: 'MappingCounter.SaleOfHomeContingency',\n      Cell: renderItem,\n    },\n    {\n      Header: 'Closing Period',\n      accessor: 'MappingCounter.ClosingPeriod',\n      Cell: renderItem,\n    },\n    {\n      Header: 'Furniture',\n      accessor: 'MappingCounter.Furniture',\n      Cell: renderItem,\n    },\n    {\n      Header: 'Current Status',\n      accessor: 'Step.messages.seller',\n      Cell: renderItem,\n    },\n    {\n      Header: 'Actions',\n      Cell: renderActions,\n    },\n  ];\n\n  return (\n    <div className=\"offer_block\">\n      <div className=\"offer_container\">\n        {isLoading && <Loader />}\n        <Table columns={columns} data={mappingOffers} />\n      </div>\n    </div>\n  );\n};\n\nexport default (hideIfInvalidProps(checkProps)(\n  memo(SellerOfferList),\n): AbstractComponent<Props>);\n","// @flow\nimport React, { Fragment, useEffect, useState } from 'react';\nimport type { Element } from 'react';\nimport List from 'components/SellerOfferList';\nimport { createStructuredSelector } from 'reselect';\nimport { connect } from 'react-redux';\nimport _get from 'lodash/get';\nimport { fetchOffers, saveOfferStep } from '../redux/Actions';\nimport { getAllOffers as getBuyerOffers } from 'containers/BuyerOffer/redux/Actions';\nimport { OFFER_STEPS } from 'shared/Consts';\nimport { withErrorBoundary } from 'components/ErrorBoundary';\nimport { toastr } from 'react-redux-toastr';\nimport { OFFER_ERROR_MESSAGES } from 'shared/Messages';\nimport ContingencyList from 'components/ContingencyList/Loadable';\nimport CounterOfferModal from 'components/Offers/CounterOfferModal';\n\ntype PropsWithoutRedux = {};\n\ntype Props = {\n  fetchOffers: Function,\n  offers: Array<Object>,\n  isLoading: boolean,\n  saveOfferStep: Function,\n  isSubmitting: boolean,\n  isUpdatedStep: boolean,\n  error: Object,\n  getBuyerOffers: Function,\n  isFormLoaded: boolean,\n};\n\nconst OfferList = (props: Props): Element<typeof Fragment> => {\n  const {\n    fetchOffers,\n    offers,\n    isLoading,\n    saveOfferStep,\n    isSubmitting,\n    isUpdatedStep,\n    error,\n    getBuyerOffers,\n    isFormLoaded,\n  } = props;\n\n  const [openCounterOfferDialog, setOpenCounterOfferDialog] = useState(false);\n  const [selectedOffer, setSelectedOffer] = useState();\n\n  useEffect(() => {\n    fetchOffers();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (isUpdatedStep) {\n      fetchOffers();\n      getBuyerOffers();\n      handleClickCloseDialog();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isUpdatedStep]);\n\n  useEffect(() => {\n    const { message } = error || {};\n\n    if (message) {\n      toastr.error(OFFER_ERROR_MESSAGES.saveFailure, message);\n    }\n  }, [error]);\n\n  const handleClickOpenCounterDialog = offer => {\n    setSelectedOffer(offer);\n    setOpenCounterOfferDialog(true);\n  };\n\n  const handleClickCloseDialog = ({ isReload } = {}) => {\n    setSelectedOffer();\n    setOpenCounterOfferDialog(false);\n\n    if (isReload) {\n      fetchOffers();\n      getBuyerOffers();\n    }\n  };\n\n  const handleApproval = offerId => {\n    saveOfferStep(offerId, { new_step: OFFER_STEPS.paBeingCreated });\n  };\n\n  const handleDecline = offerId => {\n    saveOfferStep(offerId, { new_step: OFFER_STEPS.sellerDecline });\n  };\n\n  return (\n    <>\n      <List\n        offers={offers}\n        isLoading={isLoading}\n        isSubmitting={isSubmitting}\n        handleClickOpenCounterDialog={handleClickOpenCounterDialog}\n      />\n      <ContingencyList offers={offers} isLoading={isLoading} />\n      <CounterOfferModal\n        offer={selectedOffer}\n        open={openCounterOfferDialog}\n        handleClickCloseDialog={handleClickCloseDialog}\n        handleApproval={handleApproval}\n        handleDecline={handleDecline}\n        isSubmitting={isSubmitting}\n        isFormLoaded={isFormLoaded}\n      />\n    </>\n  );\n};\n\nconst structuredSelector = createStructuredSelector({\n  offers: state => _get(state, ['sellerOffers', 'list', 0, 'Offers']),\n  isLoading: state => _get(state, ['sellerOffers', 'isLoading']),\n  isSubmitting: state => _get(state, ['sellerOffer', 'isLoading']),\n  isUpdatedStep: state => _get(state, ['sellerOffer', 'isUpdatedStep']),\n  error: state => _get(state, ['sellerOffer', 'error']),\n  isFormLoaded: state => _get(state, ['form', 'isFormLoaded']),\n});\n\nconst mapDispatchToProps = {\n  fetchOffers,\n  saveOfferStep,\n  getBuyerOffers,\n};\n\nexport default (connect(\n  structuredSelector,\n  mapDispatchToProps,\n)(withErrorBoundary(OfferList)): Element<PropsWithoutRedux>);\n"],"sourceRoot":""}