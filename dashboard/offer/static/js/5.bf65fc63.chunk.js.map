{"version":3,"sources":["components/Offers/Step/Content.js","helpers/Step.js","components/Offers/Step/Step700/index.js"],"names":["structuredSelector","createStructuredSelector","urls","state","_get","file","error","isLoading","isFormSaved","formData","isFileUploaded","mapDispatchToProps","saveFormData","saveFormFiles","getFormFiles","connect","withErrorBoundary","props","history","useHistory","React","isGoingToExit","setExitStatus","formId","offerId","endpoint","formBaseEndpoint","RIVERDALE_BASE_URL","redirectUrl","APP_BASE_URL","formSubmissionEndpoint","buildStep1EndPoint","redirectOptions","pathname","search","saveData","survey","formTemplate","isFormSubmitted","data","formatSurveyData","currentPageNo","ItemType","FORM_ITEM_TYPE","offer","toastr","SURVEYS_ERROR_MESSAGE","COMMON","message","FORM_SUBMITTED","_isEmpty","uploadFilesHandler","success","SURVEYS_SUCCESS_MESSAGE","FORM_DATA_SAVED_SUCCESS","FORM_DATA_SAVED_FAILURE","push","className","FormBuilder","onFilesUploadHandler","options","onFilesUploadCallbackHandler","onCompleteHandler","onPageChangedHandler","onSaveExitHandler","Step700","step"],"mappings":"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","file":"static/js/5.bf65fc63.chunk.js","sourcesContent":["// @flow\nimport * as React from 'react';\nimport type { Element, AbstractComponent } from 'react';\nimport FormBuilder from 'components/FormBuilder';\nimport {\n  saveFormData,\n  saveFormFiles,\n  getFormFiles,\n} from 'components/FormBuilder/redux/Actions';\nimport { connect } from 'react-redux';\nimport { FORM_ITEM_TYPE } from 'components/FormBuilder/Constants';\nimport { createStructuredSelector } from 'reselect';\nimport _isEmpty from 'lodash/isEmpty';\nimport _get from 'lodash/get';\nimport {\n  SURVEYS_ERROR_MESSAGE,\n  SURVEYS_SUCCESS_MESSAGE,\n} from 'components/FormBuilder/Messages';\nimport {\n  formatSurveyData,\n  isFormSubmitted,\n  uploadFilesHandler,\n  onFilesUploadCallbackHandler,\n} from 'helpers/SurveyJS';\nimport { toastr } from 'react-redux-toastr';\nimport { withErrorBoundary } from 'components/ErrorBoundary';\nimport { buildStep1EndPoint } from 'helpers/Step';\nimport { useHistory } from 'react-router-dom';\n\ntype PropsWithoutRedux = {\n  offerId: string,\n  step: string,\n  formId: string,\n};\n\ntype Props = {\n  ...PropsWithoutRedux,\n  saveFormData: Function,\n  saveFormFiles: Function,\n  getFormFiles: Function,\n  updateOfferStep: Function,\n  urls: Array<Object>,\n  file: Array<Object>,\n  error: string,\n  isFormSaved: boolean,\n  formData: Object,\n  isFileUploaded: boolean,\n};\n\nfunction OfferFormBuilder(props: Props): Element<'div'> {\n  const history = useHistory();\n  const [isGoingToExit, setExitStatus] = React.useState(false);\n  const {\n    formId,\n    offerId,\n    saveFormData,\n    saveFormFiles,\n    urls,\n    getFormFiles,\n    error,\n    file,\n    formData,\n    isFormSaved,\n    isFileUploaded,\n  } = props;\n  const endpoint = buildStep1EndPoint({ formId, offerId });\n  const { formBaseEndpoint, formSubmissionEndpoint } = endpoint;\n\n  const redirectOptions = { pathname: '/', search: '?tab=buy' };\n\n  const saveData = (survey, endpoint, formTemplate) => {\n    if (!isFormSubmitted(formData)) {\n      try {\n        const data = formatSurveyData(survey, formTemplate);\n        return saveFormData({\n          endpoint,\n          survey: {\n            currentPageNo: 0,\n            data,\n            ItemType: FORM_ITEM_TYPE.offer,\n          },\n        });\n      } catch (error) {\n        toastr.error(SURVEYS_ERROR_MESSAGE.COMMON, error.message);\n        return;\n      }\n    }\n    toastr.error(\n      SURVEYS_ERROR_MESSAGE.COMMON,\n      SURVEYS_ERROR_MESSAGE.FORM_SUBMITTED,\n    );\n  };\n\n  const uploadFiles = () => {\n    uploadFilesHandler(file, urls, saveFormFiles);\n  };\n\n  const onCompleteHandler = (survey, formTemplate) => {\n    saveData(survey, formSubmissionEndpoint, formTemplate);\n    setExitStatus(true);\n  };\n\n  const onPageChangedHandler = (survey, formTemplate) => {\n    saveData(survey, `${formBaseEndpoint}`, formTemplate);\n  };\n\n  const onSaveExitHandler = (survey, formTemplate) => {\n    saveData(survey, `${formBaseEndpoint}`, formTemplate);\n    setExitStatus(true);\n  };\n\n  const onFilesUploadHandler = ({ options }) => {\n    return onFilesUploadCallbackHandler(options, getFormFiles);\n  };\n\n  React.useEffect(() => {\n    if (_isEmpty(urls)) {\n      return;\n    }\n\n    uploadFiles();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [urls]);\n\n  React.useEffect(() => {\n    if (error) {\n      toastr.error(SURVEYS_ERROR_MESSAGE.COMMON);\n    }\n  }, [error]);\n\n  React.useEffect(() => {\n    if (isFormSaved) {\n      if (error === null)\n        toastr.success(\n          SURVEYS_SUCCESS_MESSAGE.COMMON,\n          SURVEYS_SUCCESS_MESSAGE.FORM_DATA_SAVED_SUCCESS,\n        );\n      else\n        toastr.error(\n          SURVEYS_ERROR_MESSAGE.COMMON,\n          SURVEYS_ERROR_MESSAGE.FORM_DATA_SAVED_FAILURE,\n        );\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isFormSaved]);\n\n  React.useEffect(() => {\n    if (\n      isGoingToExit &&\n      isFormSaved &&\n      ((!_isEmpty(urls) && isFileUploaded) || _isEmpty(urls))\n    ) {\n      history.push(redirectOptions);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isGoingToExit, isFormSaved, urls, isFileUploaded]);\n\n  return (\n    <div className=\"container\">\n      <FormBuilder\n        endpoint={formBaseEndpoint}\n        onFilesUploadHandler={onFilesUploadHandler}\n        onCompleteHandler={onCompleteHandler}\n        onPageChangedHandler={onPageChangedHandler}\n        onSaveExitHandler={onSaveExitHandler}\n      />\n    </div>\n  );\n}\n\nconst structuredSelector = createStructuredSelector({\n  urls: state => _get(state, ['form', 'urls']),\n  file: state => _get(state, ['form', 'file']),\n  error: state => _get(state, ['form', 'error']),\n  isLoading: state => _get(state, ['form', 'isLoading']),\n  isFormSaved: state => _get(state, ['form', 'isFormSaved']),\n  formData: state => _get(state, ['form', 'form', 'FormData']),\n  isFileUploaded: state => _get(state, ['form', 'isFileUploaded']),\n});\n\nconst mapDispatchToProps = {\n  saveFormData,\n  saveFormFiles,\n  getFormFiles,\n};\nexport default (connect(\n  structuredSelector,\n  mapDispatchToProps,\n)(withErrorBoundary(OfferFormBuilder)): AbstractComponent<PropsWithoutRedux>);\n","// @flow\nimport { APP_BASE_URL, RIVERDALE_BASE_URL } from 'shared/Consts';\nimport type { BuildStep1Props, BuildStep1 } from 'types/Step';\n\nexport const buildStep1EndPoint = ({\n  offerId,\n  formId,\n}: BuildStep1Props): BuildStep1 => {\n  const formBaseEndpoint = `${RIVERDALE_BASE_URL}/formdata/forms/${formId}/items/${offerId}`;\n  const redirectUrl = `${APP_BASE_URL}/offer?offerId=${offerId}&step=1&formId=${formId}`;\n\n  return {\n    formBaseEndpoint,\n    formSubmissionEndpoint: `${formBaseEndpoint}/submit`,\n    redirectUrl,\n  };\n};\n","// @flow\nimport React from 'react';\nimport type { Element } from 'react';\nimport Content from '../Content';\n\ntype Props = {\n  offerId: string,\n  step: string,\n  formId: string,\n};\n\nconst Step700 = (props: Props): Element<typeof Content> => {\n  const { offerId, step, formId } = props;\n\n  return <Content offerId={offerId} step={step} formId={formId} />;\n};\n\nexport default Step700;\n"],"sourceRoot":""}