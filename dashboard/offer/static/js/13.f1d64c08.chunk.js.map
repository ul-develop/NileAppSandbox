{"version":3,"sources":["components/ContingencyList/ActionButton.js","components/ContingencyList/index.js","configs/locate.js","components/Table/index.js","helpers/Table.js","helpers/Datetime.js","helpers/Offer.js"],"names":["ActionButton","offer","disabled","useState","anchorEl","setAnchorEl","offerId","_get","removalForm","find","form","FORM_TYPE_IDS","contingencyRemoval","formId","isOpen","Boolean","redirectUrl","APP_BASE_URL","OFFER_STEPS","confirmTransfer","type","className","onClick","event","currentTarget","Menu","keepMounted","open","onClose","MenuItem","component","href","hideIfInvalidProps","offers","length","memo","props","isLoading","isBuyer","sellerColumns","Header","accessor","Cell","renderItem","buyerColumns","value","row","canRemoveContingency","isDisabledContingencyAction","Loader","listTables","reduce","acc","isOfferContingencies","_isEmpty","contingencies","mappingOfferContingencies","Table","key","columns","data","LOCATE","CURRENCY","isArray","dataMemo","useMemo","useTable","getTableProps","getTableBodyProps","headers","rows","prepareRow","map","header","getHeaderProps","restHeaderProps","render","getRowProps","restRowProps","cells","cell","getCellProps","restCellProps","renderPrice","prop","Intl","NumberFormat","style","currency","format","formatDate","date","DateTimeFormat","Date","getCounterData","pathData","result","name","concat","mappingCounterData","counteredBySeller","MappingCounter","Number","CONTINGENCY_STATUS","done","getContingencyStatus","dueDateFormarted","status","dueDate","toDateString","inProcess","overdue","title","contingency","contingencyValue"],"mappings":"gQA0DeA,EA5CM,SAAC,GAA0D,IAAxDC,EAAuD,EAAvDA,MAAOC,EAAgD,EAAhDA,SAAgD,EAC7CC,mBAAS,MADoC,mBACtEC,EADsE,KAC5DC,EAD4D,KAEvEC,EAAUC,IAAKN,EAAO,CAAC,YAEvBO,EAAcD,IAAKN,EAAO,CAAC,UAAUQ,MACzC,SAAAC,GAAI,OAAIH,IAAKG,EAAM,CAAC,iBAAmBC,KAAcC,sBAEjDC,EAASN,IAAKC,EAAa,CAAC,WAU5BM,EAASC,QAAQX,GACjBY,EAAW,UAAMC,IAAN,0BAAoCX,EAApC,iBAAoDY,KAAYC,gBAAhE,mBAA0FN,GAE3G,OACE,oCACE,4BACEO,KAAK,SACLC,UAAU,+BACVC,QAhBkB,SAAAC,GACtBlB,EAAYkB,EAAMC,gBAgBdtB,SAAUA,GAEV,uBAAGmB,UAAU,sBAEf,kBAACI,EAAA,EAAD,CACErB,SAAUA,EACVsB,aAAW,EACXC,KAAMb,EACNc,QArBmB,WACvBvB,EAAY,QAsBR,kBAACwB,EAAA,EAAD,CAAUC,UAAU,IAAIC,KAAMf,GAA9B,2BC8CQgB,uBAxEG,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OAAgBA,GAAUA,EAAOC,SAwEpCF,CACdG,gBAvEsB,SACtBC,GACsD,IAC9CH,EAA+BG,EAA/BH,OAAQI,EAAuBD,EAAvBC,UAAWC,EAAYF,EAAZE,QASrBC,EAAgB,CACpB,CACEC,OAAQ,OACRC,SAAU,QACVC,KAAMC,KAER,CACEH,OAAQ,WACRC,SAAU,UACVC,KAAMC,KAER,CACEH,OAAQ,SACRC,SAAU,SACVC,KAAMC,MAIJC,EAAY,UACbL,EADa,CAEhB,CACEC,OAAQ,SACRC,SAAU,QACVC,KA9BiB,SAAC,GAAD,IAAGG,EAAH,EAAGA,MAAOC,EAAV,EAAUA,IAAV,OACnBD,GAASE,YAAqBF,GAC5B,kBAAC,EAAD,CAAc5C,MAAO4C,EAAO3C,SAAU8C,YAA4BF,KAElE,QA8BJ,GAAIT,EAAW,OAAO,kBAACY,EAAA,EAAD,MAEtB,IAAMC,EAAajB,EAAOkB,QAAO,SAACC,EAAKnD,GACrC,GACEoD,YAAqBpD,KACpBqD,IAAS/C,IAAKN,EAAO,CAAC,mBACvB,CACA,IAAMsD,EAAgBC,YAA0BvD,GAEhD,MAAM,GAAN,mBACKmD,GADL,CAEE,kBAACK,EAAA,EAAD,CACEC,IAAKnD,IAAKN,EAAO,CAAC,YAClB0D,QAASrB,EAAUM,EAAeL,EAClCqB,KAAML,MAKZ,OAAOH,IACN,IAEH,OAAOF,EAAWhB,OAChB,yBAAKb,UAAU,eACb,yBAAKA,UAAU,mBAAmB6B,IAGpC,0C,kCC5FJ,oEAAO,IAAMW,EAAS,QACTC,EAAW,O,4GCsER9B,iBA1DG,SAAC,GAAD,IAAG2B,EAAH,EAAGA,QAASC,EAAZ,EAAYA,KAAZ,OACjBG,IAAQJ,IAAYA,EAAQzB,QAAU6B,IAAQH,IAASA,EAAK1B,SAyD9CF,EAvDF,SAACI,GAAoC,IACzCuB,EAAkBvB,EAAlBuB,QAASC,EAASxB,EAATwB,KAEXI,EAAWC,mBAAQ,kBAAML,IAAM,CAACA,IAHU,EAW5CM,mBAAS,CACXP,UACAC,KAAMI,IAPNG,EAN8C,EAM9CA,cACAC,EAP8C,EAO9CA,kBACAC,EAR8C,EAQ9CA,QACAC,EAT8C,EAS9CA,KACAC,EAV8C,EAU9CA,WAMF,OACE,2CAAWJ,IAAX,CAA4B9C,UAAU,eACpC,+BACE,4BACGgD,EAAQG,KAAI,SAAAC,GAAW,IAAD,EACeA,EAAOC,iBAAnChB,EADa,EACbA,IAAQiB,EADK,uBAGrB,OACE,sCAAIjB,IAAKA,GAASiB,GACfF,EAAOG,OAAO,gBAMzB,0BAAWR,IACRE,EAAKE,KAAI,SAAA1B,GACRyB,EAAWzB,GADI,MAEkBA,EAAI+B,cAA7BnB,EAFO,EAEPA,IAAQoB,EAFD,uBAIf,OACE,sCAAIpB,IAAKA,GAASoB,GACfhC,EAAIiC,MAAMP,KAAI,SAAAQ,GAAS,IAAD,EACaA,EAAKC,eAA/BvB,EADa,EACbA,IAAQwB,EADK,uBAGrB,OACE,sCAAIxB,IAAKA,GAASwB,GACfF,EAAKJ,OAAO,sB,yDC3DjC,mHAIaO,EAAc,SAAAC,GACzB,IAAMvC,EAAQtC,IAAK6E,EAAM,QAAS,IAClC,MAAM,GAAN,OACEvC,EACI,IAAIwC,KAAKC,aAAazB,IAAQ,CAC5B0B,MAAO,WACPC,SAAU1B,MACT2B,OAAO5C,GACV,MAIKF,EAAa,SAAC,GAAD,IAAGE,EAAH,EAAGA,MAAH,OAAe,8BAAOA,GAAS,O,iGCb5C6C,EAAa,SAACC,GACzB,OAAO,IAAIN,KAAKO,eAAe/B,KAAQ4B,OAAO,IAAII,KAAKF,K,0KCEzD,IAAMG,EAAiB,SAAC7F,EAAc8F,GASpC,MARmB,CACjB,aACA,wBACA,wBACA,gBACA,aAGgB5C,QAAO,SAAC6C,EAAoBC,GAC5C,OAAO,2BACFD,GADL,kBAEGC,EAAO1F,IAAKN,EAAO8F,EAASG,OAAOD,QAErC,KAGQE,EAAqB,SAAClG,GAGjC,OAFeM,IAAKN,EAAO,CAAC,aAEbiB,KAAYkF,kBAClB,2BACFnG,GADL,IAEEoG,eAAgBP,EAAe7F,EAAO,CAAC,eAAgB,oBAIpD,2BACFA,GADL,IAEEoG,eAAgBP,EAAe7F,EAAO,CAAC,eAAgB,oBAI9CoD,EAAuB,SAACpD,GAGnC,OAFeqG,OAAO/F,IAAKN,EAAO,CAAC,aAElBiB,KAAYC,iBAGlB4B,EAAuB,SAAC9C,GACnC,OAAOM,IAAKN,EAAO,CAAC,OAAQ,oCAGjB+C,EAA8B,SAACF,GAC1C,OAAOvC,IAAKuC,EAAK,CAAC,SAAU,aAAeyD,IAAmBC,MAG1DC,EAAuB,SAACxG,EAAcgG,GAC1C,IACIS,EACAC,EAFEC,EAAUrG,IAAKN,EAAO,CAAC,gBAAD,UAAqBgG,EAArB,aAiB5B,OAbIW,IACFF,EAAmBhB,EAAWkB,GAC9BD,EACEjB,GAAW,IAAIG,MAAOgB,iBAAmBH,EACrCH,IAAmBO,UACnBP,IAAmBQ,SAIT,QADAxG,IAAKN,EAAO,CAAC,gBAAD,UAAqBgG,EAArB,eAE5BU,EAASJ,IAAmBC,MAGvB,CACLG,SACAC,QAASF,IAIAlD,EAA4B,SAACvD,GAgBxC,MAfyB,CACvB,CACEgG,KAAM,qBACNe,MAAO,+BAET,CACEf,KAAM,wBACNe,MAAO,kCAET,CACEf,KAAM,wBACNe,MAAO,iCAIa7D,QAAO,SAACC,EAAoB6D,GAAyB,IACnEhB,EAAgBgB,EAAhBhB,KAAMe,EAAUC,EAAVD,MAERE,EAAmB3G,IAAKN,EAAO,CAAC,gBAAiBgG,IAEvD,MACQ,GAAN,mBAAW7C,GADY,QAArB8D,EACF,CAAgB,CAAEF,UAGpB,cAGIA,QACA/G,SACGwG,EAAqBxG,EAAOgG,QAGlC","file":"static/js/13.f1d64c08.chunk.js","sourcesContent":["// @flow\nimport React, { useState, Fragment } from 'react';\nimport type { Element } from 'react';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport _get from 'lodash/get';\nimport { APP_BASE_URL, FORM_TYPE_IDS, OFFER_STEPS } from 'shared/Consts';\nimport type { Offer } from 'types/Offer';\n\ntype Props = {\n  offer: Offer,\n  disabled?: boolean,\n};\n\nconst ActionButton = ({ offer, disabled }: Props): Element<typeof Fragment> => {\n  const [anchorEl, setAnchorEl] = useState(null);\n  const offerId = _get(offer, ['OfferId']);\n\n  const removalForm = _get(offer, ['Forms']).find(\n    form => _get(form, ['FormTypeId']) === FORM_TYPE_IDS.contingencyRemoval,\n  );\n  const formId = _get(removalForm, ['FormId']);\n\n  const onClickOpenMenu = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const onClickCloseMenu = () => {\n    setAnchorEl(null);\n  };\n\n  const isOpen = Boolean(anchorEl);\n  const redirectUrl = `${APP_BASE_URL}/offer?offerId=${offerId}&step=${OFFER_STEPS.confirmTransfer}&formId=${formId}`;\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        className=\"minimal-btn animated_fastest\"\n        onClick={onClickOpenMenu}\n        disabled={disabled}\n      >\n        <i className=\"fa fa-ellipsis-h\"></i>\n      </button>\n      <Menu\n        anchorEl={anchorEl}\n        keepMounted\n        open={isOpen}\n        onClose={onClickCloseMenu}\n      >\n        <MenuItem component=\"a\" href={redirectUrl}>\n          Remove Contingencies\n        </MenuItem>\n      </Menu>\n    </>\n  );\n};\n\nexport default ActionButton;\n","// @flow\nimport React, { Fragment, memo } from 'react';\nimport type { Element, AbstractComponent } from 'react';\nimport Table from 'components/Table';\nimport Loader from 'components/Loader';\nimport { hideIfInvalidProps } from 'utils/RenderComponent';\nimport type { Offer } from 'types/Offer';\nimport _get from 'lodash/get';\nimport _isEmpty from 'lodash/isEmpty';\nimport {\n  mappingOfferContingencies,\n  isOfferContingencies,\n  canRemoveContingency,\n  isDisabledContingencyAction,\n} from 'helpers/Offer';\nimport { renderItem } from 'helpers/Table';\nimport ActionButton from './ActionButton';\n\ntype Props = {\n  offers: Array<Offer>,\n  isLoading: boolean,\n  isBuyer?: boolean,\n};\n\nconst checkProps = ({ offers }) => offers && offers.length;\n\nconst ContingencyList = (\n  props: Props,\n): Element<'div' | typeof Loader | typeof Fragment> => {\n  const { offers, isLoading, isBuyer } = props;\n\n  const renderAction = ({ value, row }) =>\n    value && canRemoveContingency(value) ? (\n      <ActionButton offer={value} disabled={isDisabledContingencyAction(row)} />\n    ) : (\n      '-'\n    );\n\n  const sellerColumns = [\n    {\n      Header: 'Type',\n      accessor: 'title',\n      Cell: renderItem,\n    },\n    {\n      Header: 'Due Date',\n      accessor: 'dueDate',\n      Cell: renderItem,\n    },\n    {\n      Header: 'Status',\n      accessor: 'status',\n      Cell: renderItem,\n    },\n  ];\n\n  const buyerColumns = [\n    ...sellerColumns,\n    {\n      Header: 'Action',\n      accessor: 'offer',\n      Cell: renderAction,\n    },\n  ];\n\n  if (isLoading) return <Loader />;\n\n  const listTables = offers.reduce((acc, offer) => {\n    if (\n      isOfferContingencies(offer) &&\n      !_isEmpty(_get(offer, ['Contingencies']))\n    ) {\n      const contingencies = mappingOfferContingencies(offer);\n\n      return [\n        ...acc,\n        <Table\n          key={_get(offer, ['OfferId'])}\n          columns={isBuyer ? buyerColumns : sellerColumns}\n          data={contingencies}\n        />,\n      ];\n    }\n\n    return acc;\n  }, []);\n\n  return listTables.length ? (\n    <div className=\"offer_block\">\n      <div className=\"offer_container\">{listTables}</div>\n    </div>\n  ) : (\n    <></>\n  );\n};\n\nexport default (hideIfInvalidProps(checkProps)(\n  memo(ContingencyList),\n): AbstractComponent<Props>);\n","export const LOCATE = 'en-US';\nexport const CURRENCY = 'USD';\n","// @flow\nimport React, { useMemo } from 'react';\nimport type { Element, AbstractComponent } from 'react';\nimport { useTable } from 'react-table';\nimport { hideIfInvalidProps } from 'utils/RenderComponent';\nimport isArray from 'lodash/isArray';\nimport './Style.css';\n\ntype Props = {\n  columns: Array<Object>,\n  data: Array<Object>,\n};\n\nconst checkProps = ({ columns, data }) =>\n  isArray(columns) && columns.length && isArray(data) && data.length;\n\nconst Table = (props: Props): Element<'table'> => {\n  const { columns, data } = props;\n\n  const dataMemo = useMemo(() => data, [data]);\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headers,\n    rows,\n    prepareRow,\n  } = useTable({\n    columns,\n    data: dataMemo,\n  });\n\n  return (\n    <table {...getTableProps()} className=\"nile-table\">\n      <thead>\n        <tr>\n          {headers.map(header => {\n            const { key, ...restHeaderProps } = header.getHeaderProps();\n\n            return (\n              <th key={key} {...restHeaderProps}>\n                {header.render('Header')}\n              </th>\n            );\n          })}\n        </tr>\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map(row => {\n          prepareRow(row);\n          const { key, ...restRowProps } = row.getRowProps();\n\n          return (\n            <tr key={key} {...restRowProps}>\n              {row.cells.map(cell => {\n                const { key, ...restCellProps } = cell.getCellProps();\n\n                return (\n                  <td key={key} {...restCellProps}>\n                    {cell.render('Cell')}\n                  </td>\n                );\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nexport default (hideIfInvalidProps(checkProps)(Table): AbstractComponent<{}>);\n","import React from 'react';\nimport _get from 'lodash/get';\nimport { LOCATE, CURRENCY } from 'configs/locate';\n\nexport const renderPrice = prop => {\n  const value = _get(prop, 'value', '');\n  return `${\n    value\n      ? new Intl.NumberFormat(LOCATE, {\n          style: 'currency',\n          currency: CURRENCY,\n        }).format(value)\n      : '-'\n  }`;\n};\n\nexport const renderItem = ({ value }) => <span>{value || '-'}</span>;\n","// @flow\nimport { LOCATE } from 'configs/locate';\n\nexport const formatDate = (date: string): string => {\n  return new Intl.DateTimeFormat(LOCATE).format(new Date(date));\n};\n","// @flow\nimport _get from 'lodash/get';\nimport { OFFER_STEPS, CONTINGENCY_STATUS } from 'shared/Consts';\nimport type { Offer, OfferTable } from 'types/Offer';\nimport { formatDate } from './Datetime';\n\nconst getCounterData = (offer: Offer, pathData: Array<string>): OfferTable => {\n  const fieldNames = [\n    'OfferPrice',\n    'InspectionContingency',\n    'SaleOfHomeContingency',\n    'ClosingPeriod',\n    'Furniture',\n  ];\n\n  return fieldNames.reduce((result: OfferTable, name: string) => {\n    return {\n      ...result,\n      [name]: _get(offer, pathData.concat(name)),\n    };\n  }, {});\n};\n\nexport const mappingCounterData = (offer: Offer): Object => {\n  const stepId = _get(offer, ['StepId']);\n\n  if (stepId === OFFER_STEPS.counteredBySeller) {\n    return {\n      ...offer,\n      MappingCounter: getCounterData(offer, ['CounterOffer', 'SellerCounter']),\n    };\n  }\n\n  return {\n    ...offer,\n    MappingCounter: getCounterData(offer, ['CounterOffer', 'BuyerCounter']),\n  };\n};\n\nexport const isOfferContingencies = (offer: Offer): boolean => {\n  const stepId = Number(_get(offer, ['StepId']));\n\n  return stepId >= OFFER_STEPS.confirmTransfer;\n};\n\nexport const canRemoveContingency = (offer: Offer): boolean => {\n  return _get(offer, ['Step', 'buyer_can_remove_contingencies']);\n};\n\nexport const isDisabledContingencyAction = (row: any): boolean => {\n  return _get(row, ['values', 'status']) === CONTINGENCY_STATUS.done;\n};\n\nconst getContingencyStatus = (offer: Offer, name: string) => {\n  const dueDate = _get(offer, ['Contingencies', `${name}DueDate`]);\n  let dueDateFormarted;\n  let status;\n\n  if (dueDate) {\n    dueDateFormarted = formatDate(dueDate);\n    status =\n      formatDate(new Date().toDateString()) <= dueDateFormarted\n        ? CONTINGENCY_STATUS.inProcess\n        : CONTINGENCY_STATUS.overdue;\n  }\n\n  const isRemoved = _get(offer, ['Contingencies', `${name}Removed`]);\n  if (isRemoved === 'Yes') {\n    status = CONTINGENCY_STATUS.done;\n  }\n\n  return {\n    status,\n    dueDate: dueDateFormarted,\n  };\n};\n\nexport const mappingOfferContingencies = (offer: Offer): Array<Object> => {\n  const contingencyNames = [\n    {\n      name: 'FinanceContingency',\n      title: 'Finance Contingency Removal',\n    },\n    {\n      name: 'InspectionContingency',\n      title: 'Inspection Contingency Removal',\n    },\n    {\n      name: 'SaleOfHomeContingency',\n      title: 'Homesale Contingency Removal',\n    },\n  ];\n\n  return contingencyNames.reduce((acc: Array<Object>, contingency: Object) => {\n    const { name, title } = contingency;\n\n    const contingencyValue = _get(offer, ['Contingencies', name]);\n\n    if (contingencyValue !== 'Yes') {\n      return [...acc, { title }];\n    }\n\n    return [\n      ...acc,\n      {\n        title,\n        offer,\n        ...getContingencyStatus(offer, name),\n      },\n    ];\n  }, []);\n};\n"],"sourceRoot":""}